fn sieveOfEratosthenes(n) {
    let primes = []
    let isPrime = []
    
    // Initialize all as prime
    let i = 0
    while i <= n {
        isPrime.push(true)
        i = i + 1
    }
    
    isPrime[0] = false
    isPrime[1] = false
    
    i = 2
    while i * i <= n {
        log("Processing i=" + i)
        if isPrime[i] {
            let j = i * i
            log("  i*i = " + j)
            let count = 0
            while j <= n && count < 5 {
                log("    Marking isPrime[" + j + "] = false")
                isPrime[j] = false
                j = j + i
                log("    Next j will be: " + j)
                count = count + 1
            }
        }
        i = i + 1
    }
    
    i = 2
    while i <= n {
        if isPrime[i] {
            primes.push(i)
        }
        i = i + 1
    }
    
    return primes
}

log("Primes up to 10: " + sieveOfEratosthenes(10))