{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "Sentra",
  "patterns": [
    {
      "include": "#comments"
    },
    {
      "include": "#strings"
    },
    {
      "include": "#numbers"
    },
    {
      "include": "#constants"
    },
    {
      "include": "#keywords"
    },
    {
      "include": "#operators"
    },
    {
      "include": "#functions"
    },
    {
      "include": "#types"
    },
    {
      "include": "#variables"
    },
    {
      "include": "#imports"
    }
  ],
  "repository": {
    "comments": {
      "patterns": [
        {
          "name": "comment.line.double-slash.sentra",
          "match": "//.*$"
        },
        {
          "name": "comment.block.sentra",
          "begin": "/\\*",
          "end": "\\*/"
        }
      ]
    },
    "strings": {
      "patterns": [
        {
          "name": "string.quoted.double.sentra",
          "begin": "\"",
          "end": "\"",
          "patterns": [
            {
              "name": "constant.character.escape.sentra",
              "match": "\\\\."
            }
          ]
        },
        {
          "name": "string.quoted.single.sentra",
          "begin": "'",
          "end": "'",
          "patterns": [
            {
              "name": "constant.character.escape.sentra",
              "match": "\\\\."
            }
          ]
        },
        {
          "name": "string.template.sentra",
          "begin": "`",
          "end": "`",
          "patterns": [
            {
              "name": "constant.character.escape.sentra",
              "match": "\\\\."
            },
            {
              "name": "variable.other.readwrite.sentra",
              "match": "\\$\\{[^}]+\\}"
            }
          ]
        }
      ]
    },
    "numbers": {
      "patterns": [
        {
          "name": "constant.numeric.float.sentra",
          "match": "\\b\\d+\\.\\d+([eE][+-]?\\d+)?\\b"
        },
        {
          "name": "constant.numeric.hex.sentra",
          "match": "\\b0[xX][0-9a-fA-F]+\\b"
        },
        {
          "name": "constant.numeric.binary.sentra",
          "match": "\\b0[bB][01]+\\b"
        },
        {
          "name": "constant.numeric.octal.sentra",
          "match": "\\b0[oO][0-7]+\\b"
        },
        {
          "name": "constant.numeric.integer.sentra",
          "match": "\\b\\d+\\b"
        }
      ]
    },
    "constants": {
      "patterns": [
        {
          "name": "constant.language.boolean.true.sentra",
          "match": "\\btrue\\b"
        },
        {
          "name": "constant.language.boolean.false.sentra",
          "match": "\\bfalse\\b"
        },
        {
          "name": "constant.language.null.sentra",
          "match": "\\bnull\\b"
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.flow.sentra",
          "match": "\\b(if|else|while|for|break|continue|return|match|case|default)\\b"
        },
        {
          "name": "keyword.control.exception.sentra",
          "match": "\\b(try|catch|finally|throw)\\b"
        },
        {
          "name": "keyword.declaration.sentra",
          "match": "\\b(let|const|var|fn|class|struct|enum|type|interface)\\b"
        },
        {
          "name": "keyword.control.import.sentra",
          "match": "\\b(import|export|from|as|module)\\b"
        },
        {
          "name": "keyword.control.concurrent.sentra",
          "match": "\\b(async|await|go|spawn|channel|select)\\b"
        },
        {
          "name": "keyword.other.sentra",
          "match": "\\b(in|of|instanceof|typeof|new|delete|this|super)\\b"
        }
      ]
    },
    "operators": {
      "patterns": [
        {
          "name": "keyword.operator.comparison.sentra",
          "match": "(==|!=|<=?|>=?)"
        },
        {
          "name": "keyword.operator.logical.sentra",
          "match": "(&&|\\|\\||!)"
        },
        {
          "name": "keyword.operator.arithmetic.sentra",
          "match": "(\\+|-|\\*|/|%|\\^)"
        },
        {
          "name": "keyword.operator.assignment.sentra",
          "match": "(=|\\+=|-=|\\*=|/=|%=|\\^=|&=|\\|=)"
        },
        {
          "name": "keyword.operator.bitwise.sentra",
          "match": "(&|\\||\\^|~|<<|>>)"
        },
        {
          "name": "keyword.operator.ternary.sentra",
          "match": "\\?|:"
        },
        {
          "name": "keyword.operator.spread.sentra",
          "match": "\\.\\.\\."
        }
      ]
    },
    "functions": {
      "patterns": [
        {
          "name": "entity.name.function.sentra",
          "match": "\\b(fn)\\s+([a-zA-Z_][a-zA-Z0-9_]*)",
          "captures": {
            "1": {
              "name": "keyword.declaration.function.sentra"
            },
            "2": {
              "name": "entity.name.function.sentra"
            }
          }
        },
        {
          "name": "support.function.builtin.sentra",
          "match": "\\b(print|log|len|type|str|num|bool|push|pop|shift|unshift|slice|splice|join|split|map|filter|reduce|sort|reverse|contains|indexOf|lastIndexOf|trim|upper|lower|replace|match|test|exec|parse|stringify|json_encode|json_decode|file_read|file_write|file_exists|file_stat|dir_list|dir_create|dir_remove|http_get|http_post|tcp_connect|tcp_listen|udp_bind|websocket_connect|sha256|sha512|md5|aes_encrypt|aes_decrypt|rsa_encrypt|rsa_decrypt|base64_encode|base64_decode|random|sqrt|pow|abs|min|max|floor|ceil|round|sin|cos|tan|now|sleep|env|exit|panic|recover)\\b"
        },
        {
          "name": "support.function.security.sentra",
          "match": "\\b(port_scan|host_discover|ssl_analyze|vulnerability_scan|intrusion_detect|log_parse|threat_detect|compliance_check|firewall_rule|network_monitor|packet_capture|dns_lookup|whois_lookup|exploit_detect|malware_scan|hash_crack|password_audit|encryption_audit|certificate_verify|token_generate|token_verify|session_manage|auth_check|permission_check|audit_log|forensics_analyze|memory_dump|process_list|registry_scan|rootkit_detect)\\b"
        },
        {
          "name": "meta.function-call.sentra",
          "match": "([a-zA-Z_][a-zA-Z0-9_]*)\\s*\\(",
          "captures": {
            "1": {
              "name": "entity.name.function.sentra"
            }
          }
        }
      ]
    },
    "types": {
      "patterns": [
        {
          "name": "support.type.primitive.sentra",
          "match": "\\b(string|number|boolean|array|map|object|any|void|never)\\b"
        },
        {
          "name": "support.class.builtin.sentra",
          "match": "\\b(Array|Map|Set|Object|String|Number|Boolean|Date|RegExp|Error|Promise|Buffer|Stream|File|Socket|Server|Client|Request|Response|Database|Query|Result|Scanner|Parser|Analyzer|Monitor|Detector|Validator|Encoder|Decoder|Hasher|Cipher|Certificate|Token|Session|Logger|Handler|Router|Middleware)\\b"
        }
      ]
    },
    "variables": {
      "patterns": [
        {
          "name": "variable.language.sentra",
          "match": "\\b(this|super|self)\\b"
        },
        {
          "name": "variable.other.constant.sentra",
          "match": "\\b[A-Z][A-Z0-9_]*\\b"
        },
        {
          "name": "variable.other.readwrite.sentra",
          "match": "\\b[a-z_][a-zA-Z0-9_]*\\b"
        }
      ]
    },
    "imports": {
      "patterns": [
        {
          "name": "meta.import.sentra",
          "match": "(import)\\s+(\"[^\"]+\"|'[^']+')\\s*(as)?\\s*([a-zA-Z_][a-zA-Z0-9_]*)?",
          "captures": {
            "1": {
              "name": "keyword.control.import.sentra"
            },
            "2": {
              "name": "string.quoted.sentra"
            },
            "3": {
              "name": "keyword.control.import.sentra"
            },
            "4": {
              "name": "variable.other.readwrite.sentra"
            }
          }
        }
      ]
    }
  },
  "scopeName": "source.sentra"
}