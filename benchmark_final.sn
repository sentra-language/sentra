// Comprehensive benchmark for VM comparison
log("=== SENTRA VM COMPREHENSIVE BENCHMARK ===")

// Arithmetic operations - intensive calculation
log("Running arithmetic benchmark...")
let sum = 0
for (let i = 0; i < 10000; i = i + 1) {
    sum = sum + i * 2 - 1
    sum = sum / 1.1  
    sum = sum % 1000
    sum = sum * 0.9
}
log("Arithmetic result: " + sum)

// Array operations - creation and manipulation
log("Running array benchmark...")
let arr = []
for (let i = 0; i < 1000; i = i + 1) {
    push(arr, i)
    push(arr, i * 2)
    push(arr, i + 100)
}

let total = 0
for val in arr {
    total = total + val
}
log("Array total: " + total + " (length: " + len(arr) + ")")

// Map operations - creation and access
log("Running map benchmark...")
let map_data = {}
for (let i = 0; i < 500; i = i + 1) {
    map_data["key" + i] = i * 10
    map_data["data" + i] = "value" + i
}

let count = 0
for key in map_data {
    count = count + 1
}
log("Map entries: " + count)

// Function calls - recursive and iterative
log("Running function benchmark...")

fn iterative_sum(n) {
    let result = 0
    for (let i = 1; i <= n; i = i + 1) {
        result = result + i
    }
    return result
}

let func_result = iterative_sum(1000)
log("Function result: " + func_result)

// String operations - concatenation stress test
log("Running string benchmark...")
let text = "test"
for (let i = 0; i < 200; i = i + 1) {
    text = text + " " + i
    if len(text) > 10000 {
        text = "reset"
    }
}
log("String length: " + len(text))

log("=== BENCHMARK COMPLETE ===")
log("VM Architecture: Stack-tree hybrid")