// Logger Utility - Structured logging

let LOG_LEVELS = {
    "DEBUG": 0,
    "INFO": 1,
    "WARNING": 2,
    "ERROR": 3,
    "FATAL": 4
}

let current_level = LOG_LEVELS["INFO"]

export fn set_level(level) {
    if has_key(LOG_LEVELS, level) {
        current_level = LOG_LEVELS[level]
    }
}

export fn debug(message) {
    if current_level <= LOG_LEVELS["DEBUG"] {
        log_message("DEBUG", message)
    }
}

export fn info(message) {
    if current_level <= LOG_LEVELS["INFO"] {
        log_message("INFO", message)
    }
}

export fn warning(message) {
    if current_level <= LOG_LEVELS["WARNING"] {
        log_message("WARNING", message)
    }
}

export fn error(message) {
    if current_level <= LOG_LEVELS["ERROR"] {
        log_message("ERROR", message)
    }
}

export fn fatal(message) {
    log_message("FATAL", message)
    throw "Fatal error: " + message
}

fn log_message(level, message) {
    let timestamp = format_timestamp(now())
    let output = timestamp + " [" + level + "] " + message
    log(output)
    
    // Could also write to file
    // append_to_file("app.log", output)
}

fn format_timestamp(time) {
    // Simple timestamp formatting
    return str(time)
}

fn has_key(map, key) {
    for k in keys(map) {
        if k == key {
            return true
        }
    }
    return false
}