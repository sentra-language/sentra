fn sieveOfEratosthenes(n) {
    let primes = []
    let isPrime = []
    
    // Initialize all as prime
    let i = 0
    while i <= n {
        isPrime.push(true)
        i = i + 1
    }
    log("Array size: " + len(isPrime))
    
    isPrime[0] = false
    isPrime[1] = false
    log("Set 0 and 1 to false")
    
    i = 2
    while i * i <= n {
        log("Checking i=" + i + ", isPrime[i]=" + isPrime[i])
        if isPrime[i] {
            let j = i * i
            log("  Marking multiples of " + i + " starting from " + j)
            while j <= n {
                isPrime[j] = false
                j = j + i
            }
        }
        i = i + 1
    }
    
    log("Building primes list...")
    i = 2
    while i <= n {
        if isPrime[i] {
            primes.push(i)
            log("  Found prime: " + i)
        } else {
            primes.push(i)  // BUG: This line shouldn't be here!
            log("  Not prime: " + i)
        }
        i = i + 1
    }
    
    return primes
}

log("Primes up to 10: " + sieveOfEratosthenes(10))