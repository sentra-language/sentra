// Medium benchmark for measuring performance differences
log("=== SENTRA VM PERFORMANCE BENCHMARK ===")

// Arithmetic benchmark 
log("Testing arithmetic operations...")
let start_time = time()

let sum = 0
for (let i = 0; i < 20000; i = i + 1) {
    sum = sum + i * 2 - 1
    sum = sum / 1.1
    sum = sum % 1000
}

let arithmetic_time = time() - start_time
log("Arithmetic (20k ops): " + arithmetic_time + "ms")

// Array operations benchmark
log("Testing array operations...")
start_time = time()

let arr = []
for (let i = 0; i < 2000; i = i + 1) {
    push(arr, i)
    push(arr, i * 2)
}

let total = 0
for val in arr {
    total = total + val
}

let array_time = time() - start_time
log("Array operations (4k elements): " + array_time + "ms")

// Map operations benchmark
log("Testing map operations...")
start_time = time()

let map_data = {}
for (let i = 0; i < 1000; i = i + 1) {
    map_data["key" + i] = i * 10
    map_data["data" + i] = "value" + i
}

let map_sum = 0
for key in map_data {
    map_sum = map_sum + 1
}

let map_time = time() - start_time
log("Map operations (2k entries): " + map_time + "ms")

// Function call benchmark - iterative fibonacci
log("Testing function calls...")

fn fibonacci(n) {
    if n <= 1 {
        return n
    }
    let a = 0
    let b = 1
    for (let i = 2; i <= n; i = i + 1) {
        let temp = a + b
        a = b
        b = temp
    }
    return b
}

start_time = time()
let fib_result = fibonacci(1000)
let function_time = time() - start_time
log("Function calls (iterative fib 1000): " + function_time + "ms")

// String operations benchmark
log("Testing string operations...")
start_time = time()

let text = "performance"
for (let i = 0; i < 1000; i = i + 1) {
    text = text + " test " + i
    if len(text) > 50000 {
        text = "reset"
    }
}

let string_time = time() - start_time
log("String operations (1k ops): " + string_time + "ms")

// Total benchmark time
let total_time = arithmetic_time + array_time + map_time + function_time + string_time
log("")
log("=== BENCHMARK RESULTS ===")
log("Total execution time: " + total_time + "ms")
log("Architecture: Stack-tree hybrid with EnhancedVM")