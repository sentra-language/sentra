// src/reporter.sn - Reporting module

import "./utils.sn"

// Export: Create security report
fn CreateReport(scanResults) {
    let report = {}
    
    // Add header
    report["header"] = GenerateHeader("Security Scan Report")
    report["timestamp"] = FormatTime()
    
    // Process results
    let findings = []
    for result in scanResults {
        let finding = {
            "host": result["host"],
            "ports": result["ports"],
            "risk": assessRisk(result)
        }
        push(findings, finding)
    }
    
    report["findings"] = findings
    report["summary"] = generateSummary(findings)
    
    return report
}

// Export: Format report as text
fn FormatReportText(report) {
    let output = report["header"] + "\n"
    output = output + "Generated: " + report["timestamp"] + "\n\n"
    
    output = output + "Summary:\n"
    output = output + report["summary"] + "\n\n"
    
    output = output + "Detailed Findings:\n"
    let findings = report["findings"]
    for i in [0, len(findings) - 1] {
        let f = findings[i]
        output = output + "- Host: " + f["host"] + "\n"
        output = output + "  Risk Level: " + f["risk"] + "\n"
    }
    
    return output
}

// Local helper: Assess risk level
fn assessRisk(result) {
    let openPorts = len(result["ports"])
    if openPorts > 10 {
        return "HIGH"
    }
    if openPorts > 5 {
        return "MEDIUM"
    }
    return "LOW"
}

// Local helper: Generate summary
fn generateSummary(findings) {
    let total = len(findings)
    let high = 0
    let medium = 0
    let low = 0
    
    for f in findings {
        if f["risk"] == "HIGH" {
            high = high + 1
        }
        if f["risk"] == "MEDIUM" {
            medium = medium + 1
        }
        if f["risk"] == "LOW" {
            low = low + 1
        }
    }
    
    return "Total hosts: " + str(total) + 
           " (High: " + str(high) + 
           ", Medium: " + str(medium) + 
           ", Low: " + str(low) + ")"
}