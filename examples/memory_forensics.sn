#!/usr/bin/env sentra

log("üß† Sentra Memory Forensics Demo")
log("===============================")

// List all running processes
log("\nüìã Process Enumeration")
log("---------------------")
let processes = mem_list_processes()
log("Total processes found: " + str(len(processes)))

// Show first few processes
let limit = 5
for (let i = 0; i < len(processes) && i < limit; i++) {
    let proc = processes[i]
    log("PID " + str(proc["pid"]) + ": " + proc["name"])
}

// Find specific process by name
log("\nüîç Find Process by Name")
log("-----------------------")
let explorer_procs = mem_find_process("explorer.exe")
if (len(explorer_procs) > 0) {
    let proc = explorer_procs[0]
    log("Found explorer.exe: PID " + str(proc["pid"]))
    
    // Get detailed process information
    let detailed = mem_get_process_info(proc["pid"])
    if (detailed) {
        log("  Path: " + detailed["path"])
        log("  Command Line: " + detailed["command_line"])
        log("  Parent PID: " + str(detailed["parent_pid"]))
        
        // Memory information
        if (detailed["memory"]) {
            let mem = detailed["memory"]
            log("  Working Set: " + str(mem["working_set_size"]) + " bytes")
            log("  Virtual Size: " + str(mem["virtual_size"]) + " bytes")
        }
    }
} else {
    log("Explorer.exe not found")
}

// Analyze process tree
log("\nüå≥ Process Tree Analysis")
log("------------------------")
let tree = mem_process_tree()
if (tree) {
    log("Total processes in tree: " + str(tree["total_processes"]))
    
    // Show root processes
    let roots = tree["roots"]
    log("Root processes: " + str(len(roots)))
    for (let i = 0; i < len(roots) && i < 3; i++) {
        let root = roots[i]
        log("  Root PID " + str(root["pid"]) + ": " + root["name"] + " (" + str(root["child_count"]) + " children)")
    }
}

// Memory region analysis for current process
log("\nüó∫Ô∏è  Memory Region Analysis")
log("-------------------------")
let current_pid = os_processes()[0]["pid"] // Get first process as example
let regions = mem_get_memory_regions(current_pid)
if (regions && len(regions) > 0) {
    log("Memory regions for PID " + str(current_pid) + ":")
    let region_limit = 3
    for (let i = 0; i < len(regions) && i < region_limit; i++) {
        let region = regions[i]
        log("  Region " + str(i + 1) + ":")
        log("    Base: " + region["base_address"])
        log("    Size: " + str(region["size"]) + " bytes")
        log("    Protection: " + region["protection"])
        log("    State: " + region["state"])
        log("    Type: " + region["type"])
    }
} else {
    log("No memory regions found or access denied")
}

// Process hollowing detection
log("\nüï≥Ô∏è  Process Hollowing Detection")
log("------------------------------")
if (len(explorer_procs) > 0) {
    let pid = explorer_procs[0]["pid"]
    let hollowing = mem_detect_hollowing(pid)
    if (hollowing) {
        if (hollowing["detected"]) {
            log("‚ö†Ô∏è  Process hollowing detected in PID " + str(pid))
            let indicators = hollowing["indicators"]
            for (let i = 0; i < len(indicators); i++) {
                log("  - " + indicators[i])
            }
        } else {
            log("‚úÖ No process hollowing detected in PID " + str(pid))
        }
    }
}

// Code injection analysis
log("\nüíâ Code Injection Analysis")
log("--------------------------")
if (len(explorer_procs) > 0) {
    let pid = explorer_procs[0]["pid"]
    let injection_findings = mem_analyze_injection(pid)
    if (injection_findings && len(injection_findings) > 0) {
        log("‚ö†Ô∏è  Code injection indicators found:")
        for (let i = 0; i < len(injection_findings); i++) {
            log("  - " + injection_findings[i])
        }
    } else {
        log("‚úÖ No code injection indicators found")
    }
}

// Malware scanning
log("\nü¶† Memory Malware Scanning")
log("--------------------------")
if (len(explorer_procs) > 0) {
    let pid = explorer_procs[0]["pid"]
    let malware_detections = mem_scan_malware(pid)
    if (malware_detections && len(malware_detections) > 0) {
        log("üö® MALWARE DETECTED:")
        for (let i = 0; i < len(malware_detections); i++) {
            log("  - " + malware_detections[i])
        }
    } else {
        log("‚úÖ No malware signatures detected")
    }
}

// Child process analysis
log("\nüë∂ Child Process Analysis")
log("-------------------------")
if (len(explorer_procs) > 0) {
    let parent_pid = explorer_procs[0]["pid"]
    let children = mem_get_children(parent_pid)
    if (children && len(children) > 0) {
        log("Child processes of PID " + str(parent_pid) + ":")
        for (let i = 0; i < len(children); i++) {
            let child = children[i]
            log("  Child PID " + str(child["pid"]) + ": " + child["name"])
        }
    } else {
        log("No child processes found")
    }
}

log("\n‚úÖ Memory forensics analysis completed!")
log("   This demo showcased:")
log("   ‚Ä¢ Process enumeration and detailed information")
log("   ‚Ä¢ Process tree analysis")
log("   ‚Ä¢ Memory region inspection")
log("   ‚Ä¢ Process hollowing detection")
log("   ‚Ä¢ Code injection analysis")
log("   ‚Ä¢ Memory-based malware scanning")
log("   ‚Ä¢ Parent-child relationship analysis")