#!/usr/bin/env sentra
// Cloud Security Posture Management Demo

log("=== Cloud Security Posture Management Demo ===")
log("")

// Add AWS provider
let aws_creds = {
    "access_key": "AKIA...",
    "secret_key": "...",
    "region": "us-east-1"
}
cloud_provider_add("production-aws", "AWS", aws_creds)
log("✓ AWS provider configured")

// Add Azure provider
let azure_creds = {
    "tenant_id": "...",
    "client_id": "...",
    "client_secret": "...",
    "subscription_id": "..."
}
cloud_provider_add("production-azure", "Azure", azure_creds)
log("✓ Azure provider configured")

// Add GCP provider
let gcp_creds = {
    "project_id": "my-project",
    "credentials_json": "{...}"
}
cloud_provider_add("production-gcp", "GCP", gcp_creds)
log("✓ GCP provider configured")

log("")
log("Scanning cloud providers for compliance...")
log("")

// Scan AWS environment
log("=== AWS Scan Results ===")
let aws_report = cloud_scan("production-aws")
log("Provider: " + aws_report["provider"])
log("Resources scanned: " + str(aws_report["resources"]))
log("Overall compliance score: " + str(aws_report["overall_score"]) + "%")
log("Critical findings: " + str(aws_report["critical_findings"]))
log("High findings: " + str(aws_report["high_findings"]))

// Check specific policy results
let policies = aws_report["policy_results"]
if len(policies) > 0 {
    log("")
    log("Policy Results:")
    let i = 0
    while i < 3 && i < len(policies) {
            let policy = policies[i]
            log("  - " + policy["policy_name"])
            log("    Compliance: " + policy["compliance_score"] + "%")
            log("    Checks: " + policy["passed_checks"] + "/" + policy["total_checks"])
            
            // Show findings if any
            let findings = policy["findings"]
            if len(findings) > 0 {
                log("    Findings:")
                let j = 0
                while j < 2 && j < len(findings) {
                        let finding = findings[j]
                        log("      • [" + finding["severity"] + "] " + finding["description"])
                        log("        Fix: " + finding["remediation"])
                        j = j + 1
                }
            }
        i = i + 1
    }
}

log("")
log("=== Azure Scan Results ===")
let azure_report = cloud_scan("production-azure")
log("Provider: " + azure_report["provider"])
log("Resources scanned: " + str(azure_report["resources"]))
log("Overall compliance score: " + str(azure_report["overall_score"]) + "%")

log("")
log("=== GCP Scan Results ===")
let gcp_report = cloud_scan("production-gcp")
log("Provider: " + gcp_report["provider"])
log("Resources scanned: " + str(gcp_report["resources"]))
log("Overall compliance score: " + str(gcp_report["overall_score"]) + "%")

// Get all open findings
log("")
log("=== Open Security Findings ===")
let open_findings = cloud_findings("open")
log("Total open findings: " + str(len(open_findings)))

if len(open_findings) > 0 {
    // Show first few findings
    let i = 0
    while i < 3 && i < len(open_findings) {
            let finding = open_findings[i]
            log("")
            log("Finding ID: " + finding["id"])
            log("  Resource: " + finding["resource_id"])
            log("  Severity: " + finding["severity"])
            log("  Issue: " + finding["description"])
            log("  Remediation: " + finding["remediation"])
        i = i + 1
    }
}

// Validate an IAM policy
log("")
log("=== IAM Policy Validation ===")
let sample_policy = `{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Principal": {
        "AWS": "*"
      },
      "Action": "s3:*",
      "Resource": "*"
    }
  ]
}`

let iam_issues = cloud_validate_iam(sample_policy)
if len(iam_issues) > 0 {
    log("⚠ IAM Policy Issues Found:")
    let i = 0
    while i < 4 && i < len(iam_issues) {
            log("  - " + iam_issues[i])
        i = i + 1
    }
} else {
    log("✓ IAM policy validation passed")
}

// Cost analysis
log("")
log("=== Cloud Cost Analysis ===")
let cost_report = cloud_cost_analysis("production-aws")
log("Provider: " + cost_report["provider"])
log("Total monthly cost: $" + cost_report["total_cost"])
log("  Compute: $" + cost_report["compute_cost"])
log("  Storage: $" + cost_report["storage_cost"])
// log("  Network: $" + cost_report["network_cost"])
// log("Unused resources: " + cost_report["unused_resources"])
// log("Potential savings: $" + cost_report["potential_savings"])

log("")
log("Cost Optimization Recommendations:")
let recommendations = cost_report["recommendations"]
let i = 0
while i < 4 && i < len(recommendations) {
        log("  • " + recommendations[i])
    i = i + 1
}

// Helper functions
fn cloud_config(provider, region, key, secret) {
    return {"provider": provider, "region": region}
}

fn cloud_scan(provider) {
    if provider == "production-aws" {
        return {
            "provider": provider,
            "resources_scanned": 2,
            "compliance_score": 75,
            "critical_findings": 0,
            "high_findings": 2,
            "policies": [{
                "policy_name": "AWS CIS Benchmark v1.4",
                "compliance_score": 75,
                "passed_checks": 6,
                "total_checks": 8,
                "findings": [
                    {
                        "severity": "HIGH",
                        "description": "Ensure S3 bucket public access is blocked - Resource: sensitive-data-bucket",
                        "remediation": "Block public access in S3 bucket settings"
                    },
                    {
                        "severity": "HIGH",
                        "description": "Ensure CloudTrail is enabled in all regions - Resource: main-trail",
                        "remediation": "Enable multi-region CloudTrail"
                    }
                ]
            }]
        }
    } else if provider == "production-azure" {
        return {
            "provider": provider,
            "resources_scanned": 1,
            "compliance_score": 100,
            "critical_findings": 0,
            "high_findings": 0,
            "policies": []
        }
    } else {
        return {
            "provider": provider,
            "resources_scanned": 1,
            "compliance_score": 50,
            "critical_findings": 0,
            "high_findings": 1,
            "policies": []
        }
    }
}

fn list_open_findings() {
    return [
        {
            "id": "finding-1",
            "resource_id": "bucket-001",
            "severity": "HIGH",
            "description": "Ensure S3 bucket public access is blocked - Resource: sensitive-data-bucket",
            "remediation": "Block public access in S3 bucket settings"
        },
        {
            "id": "finding-2",
            "resource_id": "trail-001",
            "severity": "HIGH",
            "description": "Ensure CloudTrail is enabled in all regions - Resource: main-trail",
            "remediation": "Enable multi-region CloudTrail"
        },
        {
            "id": "finding-3",
            "resource_id": "bucket-001",
            "severity": "HIGH",
            "description": "Ensure Cloud Storage buckets are not public - Resource: app-uploads",
            "remediation": "Remove public access from Cloud Storage bucket"
        }
    ]
}

fn validate_iam_policy(policy) {
    let issues = []
    if !policy["Condition"] {
        issues.push("Policy lacks conditional access controls")
    }
    return issues
}

fn cloud_cost_analysis(provider) {
    return {
        "provider": provider,
        "total_cost": 1234.56,
        "compute_cost": 800,
        "storage_cost": 200,
        "network_cost": 234.56,
        "unused_resources": 5,
        "potential_savings": 234.56,
        "recommendations": [
            "Delete 3 unused EC2 instances",
            "Move 2 EBS volumes to cold storage",
            "Use reserved instances for stable workloads"
        ]
    }
}

fn cloud_benchmark_run(provider, benchmark) {
    return {
        "benchmark": benchmark,
        "score": 85,
        "passed": 198,
        "failed": 35,
        "skipped": 12
    }
}

fn cloud_compliance_report(format) {
    return "✓ Compliance report generated and saved to reports/cloud-compliance-2024-01.pdf"
}

// Run compliance benchmark
log("")
log("=== Compliance Benchmark ===")
let benchmark_result = cloud_benchmark_run("AWS", "CIS AWS Foundations v1.4")
log("Benchmark: " + benchmark_result["benchmark"])
log("Compliance Score: " + benchmark_result["score"] + "%")
log("Passed: " + benchmark_result["passed"])
log("Failed: " + benchmark_result["failed"])
log("Skipped: " + benchmark_result["skipped"])

// Generate compliance report
log("")
log("=== Generating Compliance Report ===")
let report = cloud_compliance_report("text")
log(report)

// Auto-remediate a finding (demo)
if len(open_findings) > 0 {
    log("")
    log("=== Auto-Remediation Demo ===")
    let finding_to_fix = open_findings[0]["id"]
    log("Attempting to auto-remediate finding: " + finding_to_fix)
    
    let remediation_result = cloud_auto_remediate(finding_to_fix)
    log("Status: " + remediation_result["status"])
    log("Action taken: " + remediation_result["action_taken"])
    
    // Mark as resolved
    cloud_resolve_finding(finding_to_fix)
    log("✓ Finding marked as resolved")
}

log("")
log("=== Cloud Security Scan Complete ===")
log("Review the findings and apply recommended remediations.")
log("Consider enabling continuous monitoring for real-time compliance.")