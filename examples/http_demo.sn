// HTTP Client Demo
// Demonstrates HTTP functionality in Sentra

// Simple GET request
fn test_get() {
    println("Testing HTTP GET...")
    
    let response = http_get("https://api.github.com/zen")
    
    if (response) {
        println("Status:", response["status"])
        println("Status Code:", response["status_code"])
        println("Body:", response["body"])
        println()
    }
}

// POST request with JSON
fn test_post() {
    println("Testing HTTP POST...")
    
    let body = "{\"name\": \"test\", \"value\": 123}"
    let headers = {
        "Content-Type": "application/json",
        "User-Agent": "Sentra-HTTP-Demo"
    }
    
    // httpbin.org echo service
    let response = http_post("https://httpbin.org/post", body, headers)
    
    if (response) {
        println("Status:", response["status"])
        println("Response length:", len(response["body"]))
        println()
    }
}

// Custom HTTP request
fn test_custom_request() {
    println("Testing custom HTTP request...")
    
    let headers = {
        "Accept": "application/json"
    }
    
    let response = http_request("GET", "https://httpbin.org/headers", headers, "")
    
    if (response) {
        println("Status:", response["status"])
        println("Headers received:", response["headers"])
        println()
    }
}

// Download content
fn test_download() {
    println("Testing HTTP download...")
    
    let content = http_download("https://raw.githubusercontent.com/github/gitignore/main/Go.gitignore")
    
    if (content) {
        println("Downloaded", len(content), "bytes")
        println("First 100 chars:", substr(content, 0, 100))
        println()
    }
}

// JSON API request
fn test_json_api() {
    println("Testing JSON API...")
    
    let data = {
        "name": "Sentra",
        "version": "1.0",
        "features": ["http", "websocket", "security"]
    }
    
    let response = http_json("POST", "https://httpbin.org/post", data)
    
    if (response) {
        println("Status:", response["status"])
        println("Response received")
        println()
    }
}

// Error handling
fn test_error_handling() {
    println("Testing error handling...")
    
    try {
        // Try to access non-existent domain
        let response = http_get("https://this-domain-does-not-exist-12345.com")
        println("Response:", response)
    } catch (e) {
        println("Error caught:", e)
    }
    
    println()
}

// Main execution
fn main() {
    println("=== Sentra HTTP Client Demo ===")
    println()
    
    test_get()
    test_post()
    test_custom_request()
    test_download()
    test_json_api()
    test_error_handling()
    
    println("=== Demo Complete ===")
}

main()