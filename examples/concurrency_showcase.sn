
// Sentra Concurrency Showcase
// Demonstrates parallel scanning, rate limiting, and async operations

log("=== Sentra Concurrency Showcase ===")

// 1. Create and start worker pools for parallel operations
log("Creating worker pools for parallel scanning...")

// Create a port scan worker pool
if (conc_create_worker_pool("port_scanner", 8, 100)) {
    log("✓ Port scanner worker pool created (8 workers)")
    conc_start_worker_pool("port_scanner")
    log("✓ Port scanner worker pool started")
}

// Create a web vulnerability scanner pool
if (conc_create_worker_pool("web_scanner", 4, 50)) {
    log("✓ Web vulnerability scanner pool created (4 workers)")
    conc_start_worker_pool("web_scanner")
    log("✓ Web vulnerability scanner pool started")
}

// Create a file scanner pool
if (conc_create_worker_pool("file_scanner", 6, 75)) {
    log("✓ File scanner worker pool created (6 workers)")
    conc_start_worker_pool("file_scanner")
    log("✓ File scanner worker pool started")
}

// 2. Create rate limiters to control scanning speed
log("Creating rate limiters...")

// Rate limiter for network operations (100 requests/sec, burst of 20)
if (conc_create_rate_limiter("network_limiter", 100, 20)) {
    log("✓ Network rate limiter created (100 req/sec, burst 20)")
}

// Rate limiter for web requests (50 requests/sec, burst of 10)
if (conc_create_rate_limiter("web_limiter", 50, 10)) {
    log("✓ Web rate limiter created (50 req/sec, burst 10)")
}

// Rate limiter for file operations (200 operations/sec, burst of 50)
if (conc_create_rate_limiter("file_limiter", 200, 50)) {
    log("✓ File rate limiter created (200 ops/sec, burst 50)")
}

// 3. Demonstrate parallel port scanning
log("\n=== Parallel Port Scanning ===")

// Target hosts for port scanning
let scan_targets = ["127.0.0.1", "192.168.1.1", "8.8.8.8", "1.1.1.1"]
let ports_to_scan = [22, 23, 25, 53, 80, 110, 143, 443, 993, 995, 3389]

// Submit port scan jobs to worker pool
let job_id = 1
let i = 0
while i < len(scan_targets) {
    let target = scan_targets[i]
    
    let j = 0
    while j < len(ports_to_scan) {
        let port = ports_to_scan[j]
        
        // Acquire rate limit token
        if (conc_acquire_token("network_limiter", 1000)) {
            let scan_data = {
                "host": target,
                "port": port,
                "timeout": 2000
            }
            
            if (conc_submit_job("port_scanner", "scan_" + str(job_id), "port_scan", scan_data)) {
                log("→ Submitted port scan job: " + target + ":" + str(port))
                job_id = job_id + 1
            }
        }
        j = j + 1
    }
    i = i + 1
}

// 4. Demonstrate parallel web vulnerability scanning
log("\n=== Parallel Web Vulnerability Scanning ===")

// Create web client for scanning
let web_config = {
    "timeout": 30,
    "user_agent": "Sentra Security Scanner",
    "follow_redirect": true
}

if (web_create_client("scanner", web_config)) {
    log("✓ Web scanner client created")
    
    // Target URLs for vulnerability scanning
    let web_targets = [
        "https://httpbin.org",
        "https://example.com", 
        "https://www.google.com",
        "https://github.com"
    ]
    
    let i = 0
    while i < len(web_targets) {
        let target_url = web_targets[i]
        
        // Acquire rate limit token for web requests
        if (conc_acquire_token("web_limiter", 1000)) {
            let scan_data = {
                "client_id": "scanner",
                "target_url": target_url,
                "scan_types": ["xss", "sqli", "directory_traversal"]
            }
            
            if (conc_submit_job("web_scanner", "web_" + str(i), "vuln_scan", scan_data)) {
                log("→ Submitted web vulnerability scan: " + target_url)
            }
        }
        i = i + 1
    }
}

// 5. Demonstrate parallel file system scanning
log("\n=== Parallel File System Scanning ===")

// Target directories for file scanning
let fs_targets = [".", "./examples", "./internal", "./cmd"]

let i = 0
while i < len(fs_targets) {
    let target_dir = fs_targets[i]
    
    // Acquire rate limit token for file operations
    if (conc_acquire_token("file_limiter", 1000)) {
        let scan_data = {
            "path": target_dir,
            "recursive": true,
            "hash_types": ["md5", "sha256"]
        }
        
        if (conc_submit_job("file_scanner", "file_" + str(i), "file_scan", scan_data)) {
            log("→ Submitted file system scan: " + target_dir)
        }
    }
    i = i + 1
}

// 6. Demonstrate hash calculation with worker pools
log("\n=== Parallel Hash Calculation ===")

// Create baseline for current directory
if (fs_create_baseline(".", true)) {
    log("✓ Created filesystem baseline for current directory")
}

// Calculate hashes for various files in parallel
let hash_files = ["./cmd/sentra/main.go", "./README.md", "./go.mod"]

let i = 0
while i < len(hash_files) {
    let file_path = hash_files[i]
    
    if (conc_acquire_token("file_limiter", 500)) {
        let hash_data = {
            "file_path": file_path,
            "algorithms": ["md5", "sha1", "sha256"]
        }
        
        if (conc_submit_job("file_scanner", "hash_" + str(i), "hash_calculate", hash_data)) {
            log("→ Submitted hash calculation: " + file_path)
        }
    }
    i = i + 1
}

// 7. Demonstrate network discovery with worker pools
log("\n=== Parallel Network Discovery ===")

// Scan for database services on common hosts
let db_hosts = ["localhost", "127.0.0.1", "192.168.1.1"]

let i = 0
while i < len(db_hosts) {
    let host = db_hosts[i]
    
    if (conc_acquire_token("network_limiter", 1000)) {
        let probe_data = {
            "host": host,
            "service_types": ["mysql", "postgresql", "mongodb", "redis"],
            "ports": [3306, 5432, 27017, 6379]
        }
        
        if (conc_submit_job("port_scanner", "db_" + str(i), "network_probe", probe_data)) {
            log("→ Submitted database service discovery: " + host)
        }
    }
    i = i + 1
}

// 8. Monitor concurrency metrics
log("\n=== Concurrency Metrics ===")

// Wait a moment for jobs to process
let wait_iterations = 5
let i = 0
while i < wait_iterations {
    let metrics = conc_get_metrics()
    
    log("--- Metrics Snapshot " + str(i + 1) + " ---")
    log("Active Worker Pools: " + str(metrics["worker_pools_active"]))
    log("Total Workers: " + str(metrics["workers_total"]))
    log("Tasks Queued: " + str(metrics["tasks_queued"]))
    log("Tasks Processing: " + str(metrics["tasks_processing"]))
    log("Tasks Completed: " + str(metrics["tasks_completed"]))
    log("Tasks Failed: " + str(metrics["tasks_failed"]))
    log("Resource Utilization: " + str(metrics["resource_utilization"]) + "%")
    log("Goroutine Count: " + str(metrics["goroutine_count"]))
    log("Memory Usage: " + str(metrics["memory_usage"]) + " bytes")
    
    // Simple sleep simulation
    let sleep_counter = 0
    while (sleep_counter < 100000) {
        sleep_counter = sleep_counter + 1
    }
    i = i + 1
}

// 9. Demonstrate reporting with concurrent data collection
log("\n=== Concurrent Security Reporting ===")

// Create a comprehensive security report
if (report_create("concurrent_scan", "Concurrent Security Assessment", "Multi-threaded security analysis of target infrastructure")) {
    log("✓ Security report created")
    
    // Add findings from concurrent scans
    if (report_add_finding("concurrent_scan", 
                         "Concurrent Scanning Capability", 
                         "Successfully demonstrated parallel security scanning across multiple domains",
                         "INFO",
                         "PERFORMANCE",
                         "Continue using concurrent scanning for improved efficiency")) {
        log("✓ Added concurrency finding to report")
    }
    
    if (report_add_finding("concurrent_scan",
                         "Rate Limiting Implementation",
                         "Proper rate limiting prevents overwhelming target systems during scans",
                         "LOW",
                         "CONFIGURATION",
                         "Maintain appropriate rate limits for responsible scanning")) {
        log("✓ Added rate limiting finding to report")
    }
    
    if (report_add_finding("concurrent_scan",
                         "Worker Pool Utilization",
                         "Multiple worker pools allow efficient resource allocation across scan types",
                         "INFO", 
                         "ARCHITECTURE",
                         "Optimize worker pool sizes based on system resources and target requirements")) {
        log("✓ Added worker pool finding to report")
    }
    
    // Export the report in multiple formats
    if (report_export("concurrent_scan", "JSON", "concurrent_scan.json")) {
        log("✓ Exported report as JSON")
    }
    
    if (report_export("concurrent_scan", "HTML", "concurrent_scan.html")) {
        log("✓ Exported report as HTML")
    }
}

// 10. Advanced concurrent operations
log("\n=== Advanced Concurrent Operations ===")

// Demonstrate TLS analysis with concurrency
let tls_targets = [
    {"host": "google.com", "port": 443},
    {"host": "github.com", "port": 443},
    {"host": "cloudflare.com", "port": 443}
]

let i = 0
while i < len(tls_targets) {
    let target = tls_targets[i]
    
    if (conc_acquire_token("network_limiter", 1000)) {
        let tls_result = crypto_analyze_tls(target["host"], target["port"])
        if (tls_result) {
            log("→ TLS analysis for " + target["host"] + ":" + str(target["port"]))
            log("  Security Level: " + tls_result["security_level"])
            log("  Supported Versions: " + str(len(tls_result["supported_versions"])))
            log("  Supported Ciphers: " + str(len(tls_result["supported_ciphers"])))
        }
    }
    i = i + 1
}

// Final metrics report
log("\n=== Final Concurrency Report ===")
let final_metrics = conc_get_metrics()

log("🚀 Concurrency Showcase Complete!")
log("📊 Final Statistics:")
log("   • Worker Pools Created: " + str(final_metrics["worker_pools_active"]))
log("   • Total Workers Deployed: " + str(final_metrics["workers_total"]))
log("   • Jobs Completed: " + str(final_metrics["tasks_completed"]))
log("   • Jobs Failed: " + str(final_metrics["tasks_failed"]))
log("   • Peak Resource Utilization: " + str(final_metrics["resource_utilization"]) + "%")
log("   • Memory Footprint: " + str(final_metrics["memory_usage"]) + " bytes")

if (final_metrics["tasks_completed"] > final_metrics["tasks_failed"]) {
    log("✅ Concurrency system operating successfully!")
} else {
    log("⚠️  Some issues detected in concurrent operations")
}

log("\n🔒 Sentra concurrent security scanning capabilities demonstrated successfully!")
log("   All major security domains now support parallel execution:")
log("   • Network scanning and discovery")
log("   • Web vulnerability assessment") 
log("   • File system security analysis")
log("   • Cryptographic certificate analysis")
log("   • Database security testing")
log("   • Comprehensive security reporting")
log("   • Rate limiting and resource management")