// Incident Response Automation Demo
log("🚨 Sentra Incident Response Automation")
log("=" * 50)

// Create a security incident
log("\n📋 Creating Security Incident...")
let incident = ir_create_incident(
    "Malware Detection on Workstation", 
    "Suspicious malware activity detected on user workstation WS-001",
    "high",
    "endpoint_detection"
)
log("• Incident created: " + incident["id"])
log("• Title: " + incident["title"])
log("• Severity: " + incident["severity"])
log("• Status: " + incident["status"])
log("• Created: " + incident["created_at"])

let incident_id = incident["id"]

// Collect evidence
log("\n🔍 Collecting Evidence...")
ir_collect_evidence(incident_id, "file_hash", "e3b0c44298fc1c149afbf4c8996fb924", "antivirus")
ir_collect_evidence(incident_id, "ip_address", "192.168.1.50", "network_monitor")
ir_collect_evidence(incident_id, "process_name", "suspicious.exe", "endpoint_agent")
log("• Evidence collection completed")

// Update incident with additional details
log("\n📝 Updating Incident...")
let updates = {
    "category": "malware",
    "assigned_to": "security_analyst_1"
}
ir_update_incident(incident_id, updates)
log("• Incident updated with category and assignment")

// List available playbooks and get the malware response playbook ID
log("\n📖 Available Playbooks...")
let playbooks = ir_list_playbooks()
log("• Total playbooks: " + len(playbooks))

let malware_playbook_id = ""
for playbook in playbooks {
    log("  - " + playbook["id"] + ": " + playbook["name"] + " (" + playbook["category"] + ")")
    // Use first available playbook if no malware-specific one exists
    if malware_playbook_id == "" {
        malware_playbook_id = playbook["id"]
    }
    if playbook["category"] == "malware" {
        malware_playbook_id = playbook["id"]
    }
}

// Execute malware response playbook
log("\n🎯 Executing Malware Response Playbook...")
let playbook_response = ir_execute_playbook(incident_id, malware_playbook_id)
log("• Playbook executed: " + playbook_response["action"])
log("• Status: " + playbook_response["status"])
log("• Message: " + playbook_response["message"])
log("• Evidence collected: " + len(playbook_response["evidence"]) + " items")
log("• Next steps: " + len(playbook_response["next_steps"]) + " actions")

// Execute specific response action
log("\n⚡ Executing Response Action...")
let action_params = {"host": "WS-001"}
let action_response = ir_execute_action(incident_id, "RA-001", action_params)
log("• Action: " + action_response["action"])
log("• Status: " + action_response["status"])
log("• Message: " + action_response["message"])

// Get detailed incident information
log("\n📊 Incident Details...")
let detailed_incident = ir_get_incident(incident_id)
log("• ID: " + detailed_incident["id"])
log("• Title: " + detailed_incident["title"])
log("• Category: " + detailed_incident["category"])
log("• Assigned to: " + detailed_incident["assigned_to"])
log("• Artifacts collected: " + len(detailed_incident["artifacts"]))
log("• Timeline events: " + len(detailed_incident["timeline"]))
log("• Actions executed: " + len(detailed_incident["actions"]))

// Create a second incident for demonstration
log("\n🔴 Creating Another Incident...")
let incident2 = ir_create_incident(
    "Network Intrusion Attempt",
    "Multiple failed login attempts detected from external IP",
    "medium", 
    "siem_system"
)
log("• Second incident created: " + incident2["id"])

// List all incidents
log("\n📋 Listing All Incidents...")
let all_incidents = ir_list_incidents({})
log("• Total incidents: " + len(all_incidents))
for incident in all_incidents {
    log("  - " + incident["id"] + ": " + incident["title"] + " (" + incident["severity"] + ")")
}

// Filter incidents by severity
log("\n🔍 Filtering High Severity Incidents...")
let high_incidents = ir_list_incidents({"severity": "high"})
log("• High severity incidents: " + len(high_incidents))

// Create a custom playbook
log("\n📖 Creating Custom Playbook...")
let custom_steps = [
    {
        "name": "Isolate System", 
        "description": "Immediately isolate the affected system",
        "action": "isolate_host"
    },
    {
        "name": "Collect Forensics",
        "description": "Collect forensic evidence from the system", 
        "action": "collect_logs"
    },
    {
        "name": "Notify Management",
        "description": "Notify management of the incident",
        "action": "notify_team"
    }
]

let custom_playbook = ir_create_playbook(
    "Custom Data Breach Response",
    "Custom playbook for data breach incidents", 
    "data_breach",
    custom_steps
)
log("• Custom playbook created: " + custom_playbook["id"])
log("• Name: " + custom_playbook["name"])
log("• Category: " + custom_playbook["category"])

// Get incident metrics
log("\n📈 Incident Metrics...")
let metrics = ir_get_metrics()
log("• Total incidents: " + metrics["total_incidents"])
log("• Open incidents: " + metrics["open_incidents"])
log("• Closed incidents: " + metrics["closed_incidents"])
log("• Critical incidents: " + metrics["critical_incidents"])
log("• High incidents: " + metrics["high_incidents"])
log("• Medium incidents: " + metrics["medium_incidents"])
log("• Low incidents: " + metrics["low_incidents"])

// Close the first incident
log("\n✅ Closing Incident...")
ir_close_incident(incident_id, "Malware removed, system cleaned, security measures updated")
log("• Incident " + incident_id + " has been closed")

// Final metrics after closure
log("\n📊 Final Metrics...")
let final_metrics = ir_get_metrics()
log("• Open incidents: " + final_metrics["open_incidents"])
log("• Closed incidents: " + final_metrics["closed_incidents"])

log("\n" + "=" * 50)
log("🎯 Incident Response Automation Complete!")
log("=" * 50)

log("\n🛡️ Incident Response Capabilities:")
log("• Automated incident creation and tracking")
log("• Evidence collection and chain of custody")
log("• Playbook-driven response automation")
log("• Real-time incident timeline tracking")
log("• Comprehensive metrics and reporting")
log("• Custom playbook creation and execution")

log("\n✅ All incident response features operational!")
log("🚀 Ready for automated security incident handling!")