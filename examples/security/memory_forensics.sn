#!/usr/bin/env sentra

log("🧠 Sentra Memory Forensics Demo")
log("===============================")

// List all running processes
log("\n📋 Process Enumeration")
log("---------------------")
let processes = mem_enum_processes()
log("Total processes found: " + str(len(processes)))

// Show first few processes
let limit = 5
for (let i = 0; i < len(processes) && i < limit; i = i + 1) {
    let proc = processes[i]
    log("PID " + str(proc["pid"]) + ": " + proc["name"])
}

// Find specific process by name
log("\n🔍 Find Process by Name")
log("-----------------------")
let explorer_procs = mem_find_process("explorer.exe")
if (len(explorer_procs) > 0) {
    let proc = explorer_procs[0]
    log("Found explorer.exe: PID " + str(proc["pid"]))
    
    // Get detailed process information
    let detailed = mem_get_process_info(proc["pid"])
    if (detailed) {
        log("  Path: " + detailed["path"])
        log("  Command Line: " + detailed["command_line"])
        log("  Parent PID: " + str(detailed["parent_pid"]))
        
        // Memory information
        if (detailed["memory"]) {
            let mem = detailed["memory"]
            log("  Working Set: " + str(mem["working_set_size"]) + " bytes")
            log("  Virtual Size: " + str(mem["virtual_size"]) + " bytes")
        }
    }
} else {
    log("Explorer.exe not found")
}

// Analyze process tree
log("\n🌳 Process Tree Analysis")
log("------------------------")
let tree = mem_get_process_tree()
if (tree) {
    log("Total processes in tree: " + str(tree["total"]))
    
    // Show root processes
    let roots = tree["roots"]
    log("Root processes: " + str(roots))
    if (tree["tree"]) {
        let root_trees = tree["tree"]
        for (let i = 0; i < len(root_trees) && i < 3; i = i + 1) {
            let root = root_trees[i]
            let children = root["children"]
            let child_count = 0
            if (children) {
                child_count = len(children)
            }
            log("  Root PID " + str(root["pid"]) + ": " + root["name"] + " (" + str(child_count) + " children)")
        }
    }
}

// Memory region analysis for current process
log("\n🗺️  Memory Region Analysis")
log("-------------------------")
let current_pid = 1234 // Use explorer.exe PID as example
let regions = mem_get_regions(current_pid)
if (regions && len(regions) > 0) {
    log("Memory regions for PID " + str(current_pid) + ":")
    let region_limit = 3
    for (let i = 0; i < len(regions) && i < region_limit; i = i + 1) {
        let region = regions[i]
        log("  Region " + str(i + 1) + ":")
        log("    Base: " + region["base_address"])
        log("    Size: " + str(region["size"]) + " bytes")
        log("    Protection: " + region["protection"])
        log("    State: " + region["state"])
        log("    Type: " + region["type"])
    }
} else {
    log("No memory regions found or access denied")
}

log("✅ Memory forensics demo completed!")