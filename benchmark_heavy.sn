// Heavy benchmark for measuring performance differences
log("=== SENTRA VM HEAVY PERFORMANCE BENCHMARK ===")

// Arithmetic benchmark - much heavier
log("Testing arithmetic operations...")
let start_time = time()

let sum = 0
for (let i = 0; i < 50000; i = i + 1) {
    sum = sum + i * 2 - 1
    sum = sum / 1.1
    sum = sum % 1000
    sum = sum * 0.9
    sum = sum + 17
}

let arithmetic_time = time() - start_time
log("Arithmetic (50k ops): " + arithmetic_time + "ms")

// Array operations benchmark - much heavier
log("Testing array operations...")
start_time = time()

let arr = []
for (let i = 0; i < 5000; i = i + 1) {
    push(arr, i)
    push(arr, i * 2)
    push(arr, i * 3)
    push(arr, i + 100)
}

let total = 0
for val in arr {
    total = total + val
}

let array_time = time() - start_time
log("Array operations (20k elements): " + array_time + "ms")

// Map operations benchmark - much heavier
log("Testing map operations...")
start_time = time()

let map_data = {}
for (let i = 0; i < 2500; i = i + 1) {
    map_data["key" + i] = i * 10
    map_data["data" + i] = "value" + i
    map_data["extra" + i] = i * 20
}

let map_sum = 0
for key in map_data {
    let val = map_data[key]
    map_sum = map_sum + 1
}

let map_time = time() - start_time
log("Map operations (7.5k entries): " + map_time + "ms")

// Function call benchmark - fibonacci
log("Testing function calls...")

fn fibonacci(n) {
    if n <= 1 {
        return n
    }
    return fibonacci(n - 1) + fibonacci(n - 2)
}

start_time = time()
let fib_result = fibonacci(30)
let function_time = time() - start_time
log("Function calls (fib 30): " + function_time + "ms")

// String operations benchmark - much heavier
log("Testing string operations...")
start_time = time()

let text = "performance"
for (let i = 0; i < 2000; i = i + 1) {
    text = text + " test " + i + " data"
    if len(text) > 100000 {
        text = "reset"
    }
}

let string_time = time() - start_time
log("String operations (2k ops): " + string_time + "ms")

// Total benchmark time
let total_time = arithmetic_time + array_time + map_time + function_time + string_time
log("")
log("=== HEAVY BENCHMARK RESULTS ===")
log("Total execution time: " + total_time + "ms")
log("Stack-tree hybrid architecture with standard EnhancedVM")