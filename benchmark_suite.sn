// Sentra VM Benchmark Suite
// Tests performance of various language features

fn benchmark_arithmetic() {
    let iterations = 10000
    let sum = 0
    let i = 0
    
    while i < iterations {
        sum = sum + i * 2 - 1
        i = i + 1
    }
    
    return sum
}

fn benchmark_function_calls() {
    fn inner(x) {
        return x * 2 + 1
    }
    
    let result = 0
    let i = 0
    while i < 1000 {
        result = inner(i)
        i = i + 1
    }
    
    return result
}

fn benchmark_array_ops() {
    let arr = []
    let i = 0
    
    // Build array
    while i < 100 {
        arr[i] = i * 2
        i = i + 1
    }
    
    // Sum array
    let sum = 0
    i = 0
    while i < 100 {
        sum = sum + arr[i]
        i = i + 1
    }
    
    return sum
}

fn benchmark_map_ops() {
    let map = {}
    let i = 0
    
    // Build map
    while i < 50 {
        map["key" + i] = i * 3
        i = i + 1
    }
    
    // Access map
    let sum = 0
    i = 0
    while i < 50 {
        sum = sum + map["key" + i]
        i = i + 1
    }
    
    return sum
}

fn benchmark_string_ops() {
    let str = ""
    let i = 0
    
    while i < 100 {
        str = str + "a"
        i = i + 1
    }
    
    return str
}

// Run benchmarks
log("Sentra VM Performance Benchmarks")
log("=================================\n")

log("1. Arithmetic Operations (10k iterations):")
let result1 = benchmark_arithmetic()
log("   Result: " + result1)

log("\n2. Function Calls (1k calls):")
let result2 = benchmark_function_calls()
log("   Result: " + result2)

log("\n3. Array Operations (100 elements):")
let result3 = benchmark_array_ops()
log("   Result: " + result3)

log("\n4. Map Operations (50 entries):")
let result4 = benchmark_map_ops()
log("   Result: " + result4)

log("\n5. String Concatenation (100 chars):")
let result5 = benchmark_string_ops()
log("   Length: " + 100)

log("\nâœ“ All benchmarks completed successfully")