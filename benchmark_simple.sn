// Simple benchmark comparing current VM performance
log("=== SENTRA VM PERFORMANCE BENCHMARK ===")

// Arithmetic benchmark
log("Testing arithmetic operations...")
let start_time = time()

let sum = 0
for (let i = 0; i < 5000; i = i + 1) {
    sum = sum + i * 2 - 1
    sum = sum / 1.1
    sum = sum % 1000
}

let arithmetic_time = time() - start_time
log("Arithmetic (5k ops): " + arithmetic_time + "ms")

// Array operations benchmark
log("Testing array operations...")
start_time = time()

let arr = []
for (let i = 0; i < 500; i = i + 1) {
    push(arr, i)
    push(arr, i * 2)
    push(arr, i * 3)
}

let total = 0
for val in arr {
    total = total + val
}

let array_time = time() - start_time
log("Array operations (1.5k elements): " + (array_time) + "ms")

// Map operations benchmark  
log("Testing map operations...")
start_time = time()

let map_data = {}
for (let i = 0; i < 250; i = i + 1) {
    map_data["key" + i] = i * 10
    map_data["data" + i] = "value" + i
}

let map_sum = 0
for key in map_data {
    // Skip type checking for simplicity
    let val = map_data[key]
    map_sum = map_sum + 1 // Count entries instead
}

let map_time = time() - start_time
log("Map operations (500 entries): " + map_time + "ms")

// Function call benchmark
log("Testing function calls...")

fn fibonacci(n) {
    if n <= 1 {
        return n
    }
    return fibonacci(n - 1) + fibonacci(n - 2)
}

start_time = time()
let fib_result = fibonacci(20)
let function_time = time() - start_time
log("Function calls (fib 20): " + function_time + "ms")

// String operations benchmark
log("Testing string operations...")
start_time = time()

let text = "performance"
for (let i = 0; i < 500; i = i + 1) {
    text = text + " test " + i
    if len(text) > 20000 {
        text = "reset"
    }
}

let string_time = time() - start_time  
log("String operations (500 ops): " + string_time + "ms")

// Total benchmark time
let total_time = arithmetic_time + array_time + map_time + function_time + string_time
log("")
log("=== BENCHMARK RESULTS ===")
log("Total execution time: " + total_time + "ms")
log("Stack-tree hybrid architecture with standard VM")