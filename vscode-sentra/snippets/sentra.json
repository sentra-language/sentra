{
  "Port Scanner": {
    "prefix": "portscan",
    "body": [
      "// Port scan example",
      "let results = port_scan(\"${1:127.0.0.1}\", ${2:1}, ${3:1000}, \"${4:TCP}\")",
      "for (let i = 0; i < len(results); i++) {",
      "    let port = results[i]",
      "    if (port[\"state\"] == \"open\") {",
      "        log(\"Port \" + port[\"port\"] + \" is open\")",
      "    }",
      "}"
    ],
    "description": "Port scanning template"
  },
  "Worker Pool": {
    "prefix": "workerpool",
    "body": [
      "// Create worker pool for parallel processing",
      "if (conc_create_worker_pool(\"${1:pool_name}\", ${2:4}, ${3:100})) {",
      "    log(\"Worker pool created\")",
      "    conc_start_worker_pool(\"${1:pool_name}\")",
      "    ",
      "    // Submit jobs",
      "    conc_submit_job(\"${1:pool_name}\", \"job1\", \"${4:task_type}\", ${5:data})",
      "}"
    ],
    "description": "Worker pool creation template"
  },
  "Web Vulnerability Scan": {
    "prefix": "webscan",
    "body": [
      "// Web vulnerability scanning",
      "let config = {",
      "    \"timeout\": 30,",
      "    \"user_agent\": \"Sentra Scanner\"",
      "}",
      "",
      "if (web_create_client(\"scanner\", config)) {",
      "    let xss = web_scan_xss(\"scanner\", \"${1:https://example.com}\")",
      "    let sqli = web_scan_sqli(\"scanner\", \"${1:https://example.com}\")",
      "    ",
      "    if (xss[\"vulnerable\"]) {",
      "        log(\"XSS vulnerability found!\")",
      "    }",
      "}"
    ],
    "description": "Web vulnerability scanning template"
  },
  "File Integrity Check": {
    "prefix": "integrity",
    "body": [
      "// File integrity monitoring",
      "if (fs_create_baseline(\"${1:.}\", true)) {",
      "    log(\"Baseline created\")",
      "    ",
      "    // Later, check for changes",
      "    let changes = fs_compare_baseline(\"${1:.}\")",
      "    if (len(changes) > 0) {",
      "        log(\"File changes detected:\")",
      "        for (let i = 0; i < len(changes); i++) {",
      "            log(\"  - \" + changes[i])",
      "        }",
      "    }",
      "}"
    ],
    "description": "File integrity monitoring template"
  },
  "TLS Analysis": {
    "prefix": "tlscheck",
    "body": [
      "// TLS/SSL analysis",
      "let tls = crypto_analyze_tls(\"${1:example.com}\", ${2:443})",
      "if (tls) {",
      "    log(\"TLS Version: \" + tls[\"version\"])",
      "    log(\"Security Level: \" + tls[\"security_level\"])",
      "    ",
      "    if (tls[\"security_level\"] == \"weak\") {",
      "        log(\"WARNING: Weak TLS configuration detected!\")",
      "    }",
      "}"
    ],
    "description": "TLS/SSL security analysis"
  },
  "Security Report": {
    "prefix": "report",
    "body": [
      "// Create security report",
      "if (report_create(\"${1:scan_report}\", \"${2:Security Assessment}\", \"${3:Description}\")) {",
      "    // Add findings",
      "    report_add_finding(",
      "        \"${1:scan_report}\",",
      "        \"${4:Finding Title}\",",
      "        \"${5:Finding Description}\",",
      "        \"${6:HIGH}\", // Severity: CRITICAL, HIGH, MEDIUM, LOW, INFO",
      "        \"${7:VULNERABILITY}\", // Category",
      "        \"${8:Remediation steps}\"",
      "    )",
      "    ",
      "    // Export report",
      "    report_export(\"${1:scan_report}\", \"HTML\", \"report.html\")",
      "}"
    ],
    "description": "Security report generation"
  },
  "Database Security Check": {
    "prefix": "dbsec",
    "body": [
      "// Database security check",
      "let conn = db_connect(\"${1:mysql://user:pass@localhost/db}\")",
      "if (conn) {",
      "    // Check for SQL injection",
      "    let injection = db_scan_injection(conn, \"${2:table_name}\")",
      "    ",
      "    // Audit users and permissions",
      "    let users = db_audit_users(conn)",
      "    ",
      "    // Find sensitive data",
      "    let sensitive = db_find_sensitive(conn)",
      "    ",
      "    db_close(conn)",
      "}"
    ],
    "description": "Database security assessment"
  },
  "Function Definition": {
    "prefix": "fn",
    "body": [
      "fn ${1:function_name}(${2:params}) {",
      "    ${3:// function body}",
      "    return ${4:value}",
      "}"
    ],
    "description": "Function definition"
  },
  "For Loop": {
    "prefix": "for",
    "body": [
      "for (let ${1:i} = ${2:0}; ${1:i} < ${3:length}; ${1:i}++) {",
      "    ${4:// loop body}",
      "}"
    ],
    "description": "For loop"
  },
  "If Statement": {
    "prefix": "if",
    "body": [
      "if (${1:condition}) {",
      "    ${2:// if body}",
      "} else {",
      "    ${3:// else body}",
      "}"
    ],
    "description": "If-else statement"
  }
}