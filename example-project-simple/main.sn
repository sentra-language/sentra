// Simple Multi-file Sentra Project
// Demonstrates working imports between files

// For now, using inline modules until file imports are fully implemented
// In production, these would be separate files

// === Task Module (would be in task.sn) ===
let Task = {
    "create": fn(title, priority) {
        return {
            "id": generate_id(),
            "title": title,
            "priority": priority,
            "status": "pending",
            "created_at": now()
        }
    },
    
    "complete": fn(task) {
        task["status"] = "completed"
        task["completed_at"] = now()
        return task
    },
    
    "toString": fn(task) {
        return "[" + task["priority"] + "] " + task["title"] + " (" + task["status"] + ")"
    }
}

// === Logger Module (would be in logger.sn) ===
let Logger = {
    "info": fn(msg) { log("[INFO] " + msg) },
    "error": fn(msg) { log("[ERROR] " + msg) },
    "debug": fn(msg) { log("[DEBUG] " + msg) }
}

// === Database Module (would be in database.sn) ===
let Database = {
    "data": {"tasks": []},
    
    "save": fn(collection, item) {
        if !Database.data[collection] {
            Database.data[collection] = []
        }
        push(Database.data[collection], item)
        Logger.info("Saved to " + collection + ": " + item["id"])
        return item
    },
    
    "findAll": fn(collection) {
        if Database.data[collection] {
            return Database.data[collection]
        }
        return []
    }
}

// === Application Module (would be in app.sn) ===
let App = {
    "tasks": [],
    
    "init": fn() {
        Logger.info("Initializing Task Management System")
        App.tasks = Database.findAll("tasks")
        Logger.info("Loaded " + len(App.tasks) + " tasks")
    },
    
    "createTask": fn(title, priority) {
        let task = Task.create(title, priority)
        Database.save("tasks", task)
        push(App.tasks, task)
        Logger.info("Created task: " + Task.toString(task))
        return task
    },
    
    "completeTask": fn(task_id) {
        for task in App.tasks {
            if task["id"] == task_id {
                Task.complete(task)
                Logger.info("Completed task: " + task["title"])
                return task
            }
        }
        Logger.error("Task not found: " + task_id)
        return null
    },
    
    "listTasks": fn() {
        Logger.info("")
        Logger.info("Current Tasks:")
        if len(App.tasks) == 0 {
            Logger.info("  No tasks")
        } else {
            for task in App.tasks {
                Logger.info("  - " + Task.toString(task))
            }
        }
    },
    
    "getStatistics": fn() {
        let stats = {
            "total": len(App.tasks),
            "completed": 0,
            "pending": 0
        }
        
        for task in App.tasks {
            if task["status"] == "completed" {
                stats["completed"] = stats["completed"] + 1
            } else {
                stats["pending"] = stats["pending"] + 1
            }
        }
        
        return stats
    }
}

// === Utility Functions ===
let id_counter = 0
fn generate_id() {
    id_counter = id_counter + 1
    return "task_" + str(id_counter)
}

fn now() {
    // Mock timestamp
    return str(time())
}

// === Main Application ===
fn main() {
    log("================================")
    log("Task Management System v1.0")
    log("================================")
    log("")
    
    // Initialize application
    App.init()
    
    // Create some tasks
    let task1 = App.createTask("Implement user authentication", "High")
    let task2 = App.createTask("Write unit tests", "Medium")
    let task3 = App.createTask("Update documentation", "Low")
    let task4 = App.createTask("Fix bug in payment system", "High")
    
    // List all tasks
    App.listTasks()
    
    // Complete some tasks
    log("")
    Logger.info("Completing tasks...")
    App.completeTask(task1["id"])
    App.completeTask(task3["id"])
    
    // Show updated list
    App.listTasks()
    
    // Show statistics
    log("")
    Logger.info("Statistics:")
    let stats = App.getStatistics()
    Logger.info("  Total: " + str(stats["total"]))
    Logger.info("  Completed: " + str(stats["completed"]))
    Logger.info("  Pending: " + str(stats["pending"]))
    
    log("")
    Logger.info("Application completed successfully")
}

// Run the application
main()